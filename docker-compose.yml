services:

  db:
    container_name: app-db
    image: postgres:17
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
    networks:
      app_network:
        aliases:
          - app-db
        ipv4_address: 172.128.0.3

  prestart:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
        restart: true
    command: bash scripts/prestart.sh
    env_file:
      - .env
    networks:
      app_network:
        aliases:
          - app-pre-start
        ipv4_address: 172.128.0.4

  app:
    container_name: app-api
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./app:/app/app
    restart: always
    depends_on:
      db:
        condition: service_healthy
        restart: true
      prestart:
        condition: service_completed_successfully
    env_file:
      - .env
    ports:
      - 8000:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      app_network:
        aliases:
          - app-api
        ipv4_address: 172.128.0.2

volumes:
  app-db-data:

networks:
  app_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.128.0.0/16
